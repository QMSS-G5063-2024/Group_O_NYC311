})
# key columns for CD analysis:
# Community.Board
# Complaint.Type
# Location.Type
# Latitude
# Longitude
# Community.Districts
########## DATA CLEANING ##########
# Removing community boards with messy names
data = data[! data$Community.Board %in%
c("", "0 Unspecified", "Unspecified BRONX","Unspecified BROOKLYN",
"Unspecified MANHATTAN", "Unspecified QUEENS", "Unspecified STATEN ISLAND"),
]
########## Grouping the 198 unique complaint types into 6 categories
# Create a vector of complaint types
complaint_types = unique(data$Complaint.Type)
# Create a function to categorize complaint types
categorize_complaint <- function(complaint_type) {
if (grepl("Noise|Disorderly", complaint_type)) {
return("Noise-related complaints")
} else if (grepl("Sanitation|Waste|Dirty|Litter|Garbage|Sewer|Bottled Water|Sewer", complaint_type)) {
return("Sanitation issues")
} else if (grepl("Building|HEAT|ELECTRIC|UNSANITARY|Boiler|Cooling|Mold|Asbestos|WATER LEAK|PLUMBING|Homeless|Housing|Homeless|Electrical|Elevator|PAINT", complaint_type)) {
return("Housing concerns")
} else if (grepl("Taxi|Traffic|Illegal Parking|Bridge|Parking|Bus|Blocked Driveway|Traffic Signal|Street Light|Vehicle|vehicle|Street Sign|Bike", complaint_type)) {
return("Transportation problems")
} else if (grepl("Safety|Rodent|Mosquitoes|Drug|Emergency|Illegal|Lead|Radioactive|SAFETY|Poison|Unleashed", complaint_type)) {
return("Safety and security")
} else if (grepl("Water|Air Quality|Tree|TREE|Condition", complaint_type)) {
return("Environmental concerns")
} else {
return("Others")
}
}
data$Complaint.Category = sapply(data$Complaint.Type, categorize_complaint)
########## Subsetting the data further into 5 subsets based on Borough
# vector of all CD names
temp = sort(unique(data$Community.Board))
# Queens Borough CDs
indices <- grep("QUEENS", temp)
temp2 = temp[indices]
Queens.CD = data[data$Community.Board %in% temp2, ]
# Manhattan Borough CDs
indices <- grep("MANHATTAN", temp)
temp2 = temp[indices]
Manhattan.CD = data[data$Community.Board %in% temp2, ]
# Bronx Borough CDs
indices <- grep("BRONX", temp)
temp2 = temp[indices]
Bronx.CD = data[data$Community.Board %in% temp2, ]
# Brooklyn Borough CDs
indices <- grep("BROOKLYN", temp)
temp2 = temp[indices]
Brooklyn.CD = data[data$Community.Board %in% temp2, ]
# Staten Island Borough CDs
indices <- grep("STATEN ISLAND", temp)
temp2 = temp[indices]
StatenIsland.CD = data[data$Community.Board %in% temp2, ]
rm(packages, indices, temp, temp2, complaint_types)
colnames(Manhattan.CD)
ggplot(Manhattan.CD, aes(x = Community.Board, fill = Complaint.Category)) +
geom_bar(position = "stack") +
labs(title = "Breakdown Of NYC311 Calls By Community Board (Manhattan)",
x = "Community Board",
y = "NC311 Calls")
##### Manhattan
ggplot(Manhattan.CD, aes(x = Community.Board, fill = Complaint.Category)) +
geom_bar(position = "stack") +
scale_fill_manual(values = c("Party" = "blue", "Meeting" = "red")) +
labs(title = "Number of Events by Area",
x = "Area",
y = "Number of Events") +
scale_fill_manual(values = c("Party" = "blue", "Meeting" = "red")) +
unique(data$Complaint.Category)
unique(data$Complaint.Category)
##### Manhattan
ggplot(Manhattan.CD, aes(x = Community.Board, fill = Complaint.Category)) +
geom_bar(position = "stack") +
scale_fill_manual(values = c("Party" = "blue", "Meeting" = "red")) +
labs(title = "Number of Events by Area",
x = "Area",
y = "Number of Events") +
scale_fill_manual(values = c("Noise-related complaints" = "orange1",
"Transportation problems" = "dodgerblue",
"Environmental concerns" = "lawngreen",
"Sanitation issues" = "lightsalmon4",
"Housing concerns" = "yellow",
"Safety and security" = "red",
"Others" = "grey")) +
theme_minimal()
##### Manhattan
ggplot(Manhattan.CD, aes(x = Community.Board, fill = Complaint.Category)) +
geom_bar(position = "stack") +
labs(title = "Number of Events by Area",
x = "Area",
y = "Number of Events") +
scale_fill_manual(values = c("Noise-related complaints" = "orange1",
"Transportation problems" = "dodgerblue",
"Environmental concerns" = "lawngreen",
"Sanitation issues" = "lightsalmon4",
"Housing concerns" = "yellow",
"Safety and security" = "red",
"Others" = "grey")) +
theme_minimal()
##### Manhattan
ggplot(Manhattan.CD, aes(x = Community.Board, fill = Complaint.Category)) +
geom_bar(position = "stack") +
labs(title = "Number of Events by Area",
x = "Area",
y = "Number of Events") +
scale_fill_manual(values = c("Noise-related complaints" = "orange1",
"Transportation problems" = "dodgerblue",
"Environmental concerns" = "lawngreen",
"Sanitation issues" = "black",
"Housing concerns" = "yellow",
"Safety and security" = "indianred1",
"Others" = "grey")) +
theme_minimal()
unique(data$Community.Board)
print(sort(unique(data$Community.Board)))
print(sort(unique(Manhattan.CD$Community.Board)))
CDs_neighborhoods = read.csv("C:/Users/limre/Desktop/QMSS/Spring Semester/5063 Data Visualization/Data Viz Assignments/Final Group Project/neighborhoods per CD.csv",
row.names = NULL)
View(CDs_neighborhoods)
################### DATA VIZ GROUP PROJECT - COMMUNITY DISTRICT ANALYSIS ###################
rm(list=ls())
# Set working directory, load data and libraries
setwd("C:/Users/limre/Desktop/QMSS/Spring Semester/5063 Data Visualization/Data Viz Assignments/Final Group Project")
data=read.csv("C:/Users/limre/Desktop/QMSS/Spring Semester/5063 Data Visualization/Data Viz Assignments/Final Group Project/updated_df_17_aprtojun.csv")
packages <-
c(
"shiny",
"shinythemes",
"leaflet",
"dplyr",
"readr",
"leaflet.extras",
"ggplot2",
"lubridate",
"plotly"
)
packages <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
# key columns for CD analysis:
# Community.Board
# Complaint.Type
# Location.Type
# Latitude
# Longitude
# Community.Districts
########## DATA CLEANING ##########
########## Removing community boards with messy names
data = data[! data$Community.Board %in%
c("", "0 Unspecified", "Unspecified BRONX","Unspecified BROOKLYN",
"Unspecified MANHATTAN", "Unspecified QUEENS", "Unspecified STATEN ISLAND",
"80 QUEENS", "81 QUEENS", "82 QUEENS", "83 QUEENS", "84 QUEENS",
"64 MANHATTAN", "26 BRONX", "27 BRONX", "28 BRONX",
"55 BROOKLYN", "56 BROOKLYN",
"95 STATEN ISLAND"
),
]
########## Adding Community Board Neighborhoods
CDs_neighborhoods = read.csv("C:/Users/limre/Desktop/QMSS/Spring Semester/5063 Data Visualization/Data Viz Assignments/Final Group Project/neighborhoods per CD.csv",
row.names = NULL)
View(data)
data = left_join(data, CDs_neighborhoods, by = c("Community.Board" = "CD"))
View(data)
# Create a vector of complaint types
complaint_types = unique(data$Complaint.Type)
# Create a function to categorize complaint types
categorize_complaint <- function(complaint_type) {
if (grepl("Noise|Disorderly", complaint_type)) {
return("Noise-related complaints")
} else if (grepl("Sanitation|Waste|Dirty|Litter|Garbage|Sewer|Bottled Water|Sewer", complaint_type)) {
return("Sanitation issues")
} else if (grepl("Building|HEAT|ELECTRIC|UNSANITARY|Boiler|Cooling|Mold|Asbestos|WATER LEAK|PLUMBING|Homeless|Housing|Homeless|Electrical|Elevator|PAINT", complaint_type)) {
return("Housing concerns")
} else if (grepl("Taxi|Traffic|Illegal Parking|Bridge|Parking|Bus|Blocked Driveway|Traffic Signal|Street Light|Vehicle|vehicle|Street Sign|Bike", complaint_type)) {
return("Transportation problems")
} else if (grepl("Safety|Rodent|Mosquitoes|Drug|Emergency|Illegal|Lead|Radioactive|SAFETY|Poison|Unleashed", complaint_type)) {
return("Safety and security")
} else if (grepl("Water|Air Quality|Tree|TREE|Condition", complaint_type)) {
return("Environmental concerns")
} else {
return("Others")
}
}
data$Complaint.Category = sapply(data$Complaint.Type, categorize_complaint)
View(data)
write.csv(data, file = "C:/Users/limre/Desktop/QMSS/Spring Semester/5063 Data Visualization/Data Viz Assignments/Final Group Project/CD_dataset.csv")
unique(data$Complaint.Category)
CD.DT.data = data %>%
group_by(Community.Board) %>%
summarize(Environmental_calls = sum(Complaint.Category=="Environmental concerns"),
Housing_calls = sum(Complaint.Category=="Housing concerns"),
Noise_calls = sum(Complaint.Category=="Noise-related complaints"),
Transportation_calls = sum(Complaint.Category=="Transportation problems"),
Sanitation_calls = sum(Complaint.Category=="Sanitation issues"),
Housing_calls = sum(Complaint.Category=="Housing concerns"),
Safety_calls = sum(Complaint.Category=="Safety and security"))
View(CD.DT.data)
CD.DT.data = data %>%
group_by(Community.Board) %>%
summarize(Environmental_calls = sum(Complaint.Category=="Environmental concerns"),
Housing_calls = sum(Complaint.Category=="Housing concerns"),
Noise_calls = sum(Complaint.Category=="Noise-related complaints"),
Transportation_calls = sum(Complaint.Category=="Transportation problems"),
Sanitation_calls = sum(Complaint.Category=="Sanitation issues"),
Housing_calls = sum(Complaint.Category=="Housing concerns"),
Safety_calls = sum(Complaint.Category=="Safety and security"),
Borough = unique(Borough),
Neighborhoods = unique(Neighborhoods),
Police_Precint = unique(Police.Precinct))
CD.DT.data = data %>%
group_by(Community.Board) %>%
summarize(Environmental_calls = sum(Complaint.Category=="Environmental concerns"),
Housing_calls = sum(Complaint.Category=="Housing concerns"),
Noise_calls = sum(Complaint.Category=="Noise-related complaints"),
Transportation_calls = sum(Complaint.Category=="Transportation problems"),
Sanitation_calls = sum(Complaint.Category=="Sanitation issues"),
Housing_calls = sum(Complaint.Category=="Housing concerns"),
Safety_calls = sum(Complaint.Category=="Safety and security"),
Borough = unique(Borough),
Neighborhoods = unique(Neighborhoods),
Police_Precint = unique(Police.Precinct))
CD.DT.data = data %>%
group_by(Community.Board) %>%
summarize(Environmental_calls = sum(Complaint.Category=="Environmental concerns"),
Housing_calls = sum(Complaint.Category=="Housing concerns"),
Noise_calls = sum(Complaint.Category=="Noise-related complaints"),
Transportation_calls = sum(Complaint.Category=="Transportation problems"),
Sanitation_calls = sum(Complaint.Category=="Sanitation issues"),
Housing_calls = sum(Complaint.Category=="Housing concerns"),
Safety_calls = sum(Complaint.Category=="Safety and security"),
Borough = unique(Borough),
Neighborhoods = unique(Neighborhoods))
CD.DT.data = data %>%
group_by(Community.Board) %>%
summarize(Environmental_calls = sum(Complaint.Category=="Environmental concerns"),
Housing_calls = sum(Complaint.Category=="Housing concerns"),
Noise_calls = sum(Complaint.Category=="Noise-related complaints"),
Transportation_calls = sum(Complaint.Category=="Transportation problems"),
Sanitation_calls = sum(Complaint.Category=="Sanitation issues"),
Housing_calls = sum(Complaint.Category=="Housing concerns"),
Safety_calls = sum(Complaint.Category=="Safety and security"),
Borough = unique(Borough[1]),
Neighborhoods = unique(Neighborhoods))
View(CD.DT.data)
packages <-
c(
"shiny",
"shinythemes",
"leaflet",
"dplyr",
"readr",
"leaflet.extras",
"ggplot2",
"lubridate",
"plotly",
"tidyr",
"data.table",
"highr",
"ggthemes",
"highcharter",
"DT"
)
packages <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x)
library(x, character.only = TRUE)
}
})
CD.DT.data = data %>%
group_by(Community.Board) %>%
summarize(Borough = unique(Borough[1]),
Neighborhoods = unique(Neighborhoods),
Environmental_calls = sum(Complaint.Category=="Environmental concerns"),
Housing_calls = sum(Complaint.Category=="Housing concerns"),
Noise_calls = sum(Complaint.Category=="Noise-related complaints"),
Transportation_calls = sum(Complaint.Category=="Transportation problems"),
Sanitation_calls = sum(Complaint.Category=="Sanitation issues"),
Housing_calls = sum(Complaint.Category=="Housing concerns"),
Safety_calls = sum(Complaint.Category=="Safety and security")
)
CD_datatable = CD.DT.data  %>%
datatable(
rownames = FALSE,
colnames = c("Community Board",
"Borough",
"Neighborhoods Included",
"Calls About Environmental Concerns",
"Calls About Housing Issues",
"Calls About Noise Complaints",
"Calls About Transportation Issues",
"Calls About Sanitation Concerns",
"Other Miscellaneous Concerns",
"Calls About Safety Issues"),
filter = list(position="top"),
options = list(
dom = "Bfrtip",
buttons = I("colvis"),
language = list(sSearch = "Filter:"),
pageLength = 10,
lengthMenu = c(10, 15, 25)
),
extensions = c("Buttons", "Responsive")
)
View(CD_datatable)
CD.DT.data  %>%
datatable(
rownames = FALSE,
colnames = c("Community Board",
"Borough",
"Neighborhoods Included",
"Calls About Environmental Concerns",
"Calls About Housing Issues",
"Calls About Noise Complaints",
"Calls About Transportation Issues",
"Calls About Sanitation Concerns",
"Other Miscellaneous Concerns",
"Calls About Safety Issues"),
filter = list(position="top"),
options = list(
dom = "Bfrtip",
buttons = I("colvis"),
language = list(sSearch = "Filter:"),
pageLength = 10,
lengthMenu = c(10, 15, 25)
),
extensions = c("Buttons", "Responsive")
)
CD.DT.data %>%
datatable(
rownames = FALSE,
colnames = c("Community Board",
"Borough",
"Neighborhoods Included",
"Calls About Environmental Concerns",
"Calls About Housing Issues",
"Calls About Noise Complaints",
"Calls About Transportation Issues",
"Calls About Sanitation Concerns",
"Other Miscellaneous Concerns",
"Calls About Safety Issues"),
filter = list(position = "top"),
options = list(
dom = "Bfrtip",
buttons = I("colvis"),
language = list(sSearch = "Filter:"),
pageLength = 10,
lengthMenu = list(c(10, 15, 25))
)
)
CD.DT.data %>%
datatable(
rownames = FALSE,
colnames = c("Community Board",
"Borough",
"Neighborhoods Included",
"Calls About Environmental Concerns",
"Calls About Housing Issues",
"Calls About Noise Complaints",
"Calls About Transportation Issues",
"Calls About Sanitation Concerns",
"Other Miscellaneous Concerns",
"Calls About Safety Issues"),
filter = list(position = "top")
)
CD.DT.data %>%
datatable(
rownames = FALSE,
colnames = c("Community Board",
"Borough",
"Neighborhoods Included",
"Calls About Environmental Concerns",
"Calls About Housing Issues",
"Calls About Noise Complaints",
"Calls About Transportation Issues",
"Calls About Sanitation Concerns",
"Other Miscellaneous Concerns"),
filter = list(position = "top")
)
colnames(CD.DT.data)
CD.DT.data = data %>%
group_by(Community.Board) %>%
summarize(Borough = unique(Borough[1]),
Neighborhoods = unique(Neighborhoods),
Environmental_calls = sum(Complaint.Category=="Environmental concerns"),
Housing_calls = sum(Complaint.Category=="Housing concerns"),
Noise_calls = sum(Complaint.Category=="Noise-related complaints"),
Transportation_calls = sum(Complaint.Category=="Transportation problems"),
Sanitation_calls = sum(Complaint.Category=="Sanitation issues"),
Other_calls = sum(Complaint.Category=="Others"),
Safety_calls = sum(Complaint.Category=="Safety and security")
)
colnames(CD.DT.data)
CD.DT.data  %>%
datatable(
rownames = FALSE,
colnames = c("Community Board",
"Borough",
"Neighborhoods Included",
"Calls About Environmental Concerns",
"Calls About Housing Issues",
"Calls About Noise Complaints",
"Calls About Transportation Issues",
"Calls About Sanitation Concerns",
"Other Miscellaneous Concerns",
"Calls About Safety Issues"),
filter = list(position="top"),
options = list(
dom = "Bfrtip",
buttons = I("colvis"),
language = list(sSearch = "Filter:"),
pageLength = 10,
lengthMenu = c(10, 15, 25)
),
extensions = c("Buttons", "Responsive")
)
runApp('Group GitHub Repository/GroupO_NYC311Complaints/jjyc_nyc ver4.R')
library(shiny)
library(plotly)
# Define UI
ui <- fluidPage(
titlePanel("Interactive Bar Plot with Several Colors"),
sidebarLayout(
sidebarPanel(
# Input: Select the number of bars
sliderInput("num_bars", "Number of Bars:",
min = 1, max = 10, value = 5)
),
mainPanel(
# Output: Plotly bar plot
plotlyOutput("barplot")
)
)
)
# Define server logic
server <- function(input, output) {
# Generate random data
data <- reactive({
data <- matrix(rpois(input$num_bars * 5, 10), ncol = 5)
colnames(data) <- paste0("Category", 1:5)
rownames(data) <- paste0("Bar", 1:input$num_bars)
data
})
# Render the interactive bar plot
output$barplot <- renderPlotly({
plot_ly(x = rownames(data()), type = "bar") %>%
add_trace(y = ~data()[,1], name = colnames(data())[1], marker = list(color = "#1f77b4")) %>%
add_trace(y = ~data()[,2], name = colnames(data())[2], marker = list(color = "#ff7f0e")) %>%
add_trace(y = ~data()[,3], name = colnames(data())[3], marker = list(color = "#2ca02c")) %>%
add_trace(y = ~data()[,4], name = colnames(data())[4], marker = list(color = "#d62728")) %>%
add_trace(y = ~data()[,5], name = colnames(data())[5], marker = list(color = "#9467bd")) %>%
layout(title = "Interactive Bar Plot with Several Colors",
xaxis = list(title = "Bars"),
yaxis = list(title = "Values"),
barmode = "stack")
})
}
# Run the application
shinyApp(ui = ui, server = server)
rm(list=ls())
data=read.csv("C:/Users/limre/Desktop/QMSS/Spring Semester/5063 Data Visualization/Data Viz Assignments/Final Group Project/oddrow_data.csv")
########## Removing community boards with messy names
data = data[! data$Community.Board %in%
c("", "0 Unspecified", "Unspecified BRONX","Unspecified BROOKLYN",
"Unspecified MANHATTAN", "Unspecified QUEENS", "Unspecified STATEN ISLAND",
"80 QUEENS", "81 QUEENS", "82 QUEENS", "83 QUEENS", "84 QUEENS",
"64 MANHATTAN", "26 BRONX", "27 BRONX", "28 BRONX",
"55 BROOKLYN", "56 BROOKLYN",
"95 STATEN ISLAND"
),
]
CDs_neighborhoods = read.csv("C:/Users/limre/Desktop/QMSS/Spring Semester/5063 Data Visualization/Data Viz Assignments/Final Group Project/neighborhoods per CD.csv",
row.names = NULL)
data = left_join(data, CDs_neighborhoods, by = c("Community.Board" = "CD"))
View(data)
# Create a vector of complaint types
complaint_types = unique(data$Complaint.Type)
# Create a function to categorize complaint types
categorize_complaint <- function(complaint_type) {
if (grepl("Noise|Disorderly", complaint_type)) {
return("Noise-related complaints")
} else if (grepl("Sanitation|Waste|Dirty|Litter|Garbage|Sewer|Bottled Water|Sewer", complaint_type)) {
return("Sanitation issues")
} else if (grepl("Building|HEAT|ELECTRIC|UNSANITARY|Boiler|Cooling|Mold|Asbestos|WATER LEAK|PLUMBING|Homeless|Housing|Homeless|Electrical|Elevator|PAINT", complaint_type)) {
return("Housing concerns")
} else if (grepl("Taxi|Traffic|Illegal Parking|Bridge|Parking|Bus|Blocked Driveway|Traffic Signal|Street Light|Vehicle|vehicle|Street Sign|Bike", complaint_type)) {
return("Transportation problems")
} else if (grepl("Safety|Rodent|Mosquitoes|Drug|Emergency|Illegal|Lead|Radioactive|SAFETY|Poison|Unleashed", complaint_type)) {
return("Safety and security")
} else if (grepl("Water|Air Quality|Tree|TREE|Condition", complaint_type)) {
return("Environmental concerns")
} else {
return("Others")
}
}
data$Complaint.Category = sapply(data$Complaint.Type, categorize_complaint)
View(data)
write.csv(data, file = "C:/Users/limre/Desktop/QMSS/Spring Semester/5063 Data Visualization/Data Viz Assignments/Final Group Project/updated_odddata_Jun17.csv")
runApp('New Group GitHub Repository/Group_O_NYC311/nc_nyc.R')
runApp('New Group GitHub Repository/Group_O_NYC311/nc_nyc.R')
runApp('New Group GitHub Repository/Group_O_NYC311/nc_nyc.R')
library(shiny); runApp('nc_nyc.R')
library(shiny); runApp('nc_nyc.R')
library(shiny); runApp('nc_nyc.R')
